{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "6f319468-2854-4f33-badb-61b7687aa332",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter the starting stop:  Adarsh Society\n",
      "Enter the ending stop:  Magdalla Port\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "No direct buses found from adarsh society to magdalla port.\n",
      "TRANSFER OPTIONS: Take bus 106sd from adarsh society to jaani farsaan, then transfer to bus 136D to reach magdalla port.\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "bus_data = pd.read_csv('surat_bus.csv')\n",
    "counter = 0\n",
    "\n",
    "def find_direct_buses(start_stop, end_stop):\n",
    "    global counter\n",
    "    direct_buses = []\n",
    "    \n",
    "    for _, row in bus_data.iterrows():\n",
    "        stops = row[['Stop 1', 'Stop 2', 'Stop 3', 'Stop 4', 'Stop 5', \n",
    "                     'Stop 6', 'Stop 7', 'Stop 8', 'Stop 9', 'Stop 10', \n",
    "                     'Stop 11', 'Stop 12', 'Stop 13', 'Stop 14', 'Stop 15', 'Stop 16', 'Stop 17', \n",
    "                     'Stop 18', 'Stop 19', 'Stop 20', 'Stop 21', 'Stop 22', \n",
    "                     'Stop 23', 'Stop 24', 'Stop 25', 'Stop 26', 'Stop 27', 'Stop 28', 'Stop 29', \n",
    "                     'Stop 30', 'Stop 31', 'Stop 32', 'Stop 33', 'Stop 34', \n",
    "                     'Stop 35', 'Stop 36', 'Stop 37', 'Stop 38', 'Stop 39', 'Stop 40', 'Stop 41', \n",
    "                     'Stop 42', 'Stop 43', 'Stop 44', 'Stop 45', 'Stop 46', \n",
    "                     'Stop 47', 'Stop 48', 'Stop 49', 'Stop 50', 'Stop 51']].dropna().str.lower().tolist()\n",
    "        \n",
    "        if start_stop in stops and end_stop in stops:\n",
    "            start_index = stops.index(start_stop)\n",
    "            end_index = stops.index(end_stop)\n",
    "            direct_buses.append(row['bus no'])\n",
    "    \n",
    "    if direct_buses:\n",
    "        counter = 1\n",
    "        print(f\"Direct buses from {start_stop} to {end_stop}: {', '.join(map(str, direct_buses))}\")\n",
    "    else:\n",
    "        print(f\"No direct buses found from {start_stop} to {end_stop}.\")\n",
    "\n",
    "def find_transfer_routes(start_stop, end_stop):\n",
    "    transfer_routes = []\n",
    "    buses_from_start = []\n",
    "    buses_to_end = []\n",
    "\n",
    "    # Gather buses that contain the start_stop\n",
    "    for _, row in bus_data.iterrows():\n",
    "        stops = row[['Stop 1', 'Stop 2', 'Stop 3', 'Stop 4', 'Stop 5', \n",
    "                     'Stop 6', 'Stop 7', 'Stop 8', 'Stop 9', 'Stop 10', \n",
    "                     'Stop 11', 'Stop 12', 'Stop 13', 'Stop 14', 'Stop 15', 'Stop 16', 'Stop 17', \n",
    "                     'Stop 18', 'Stop 19', 'Stop 20', 'Stop 21', 'Stop 22', \n",
    "                     'Stop 23', 'Stop 24', 'Stop 25', 'Stop 26', 'Stop 27', 'Stop 28', 'Stop 29', \n",
    "                     'Stop 30', 'Stop 31', 'Stop 32', 'Stop 33', 'Stop 34', \n",
    "                     'Stop 35', 'Stop 36', 'Stop 37', 'Stop 38', 'Stop 39', 'Stop 40', 'Stop 41', \n",
    "                     'Stop 42', 'Stop 43', 'Stop 44', 'Stop 45', 'Stop 46', \n",
    "                     'Stop 47', 'Stop 48', 'Stop 49', 'Stop 50', 'Stop 51']].dropna().str.lower().tolist()\n",
    "        \n",
    "        if start_stop in stops:\n",
    "            start_index = stops.index(start_stop)\n",
    "            buses_from_start.append({'bus_num': row['bus no'], 'stops': stops, 'start_index': start_index})\n",
    "        \n",
    "        if end_stop in stops:\n",
    "            end_index = stops.index(end_stop)\n",
    "            buses_to_end.append({'bus_num': row['bus no'], 'stops': stops, 'end_index': end_index})\n",
    "        \n",
    "    for bus_from_start in buses_from_start:\n",
    "        for transfer_stop in bus_from_start['stops'][bus_from_start['start_index']+1:]:\n",
    "            for bus_to_end in buses_to_end:\n",
    "                if transfer_stop in bus_to_end['stops']:\n",
    "                    if bus_from_start['bus_num'] != bus_to_end['bus_num']:\n",
    "                        transfer_index = bus_to_end['stops'].index(transfer_stop)\n",
    "                        bus_combo = (bus_from_start['bus_num'], bus_to_end['bus_num'])\n",
    "                        if bus_combo not in [(route['first_bus'], route['second_bus']) for route in transfer_routes]:\n",
    "                            transfer_routes.append({\n",
    "                                'first_bus': bus_from_start['bus_num'],\n",
    "                                'transfer_stop': transfer_stop,\n",
    "                                'second_bus': bus_to_end['bus_num']\n",
    "                            })\n",
    "                        break\n",
    "    if transfer_routes:\n",
    "        for route in transfer_routes:\n",
    "            print(f\"TRANSFER OPTIONS: Take bus {route['first_bus']} from {start_stop} to {route['transfer_stop']}, \"\n",
    "                  f\"then transfer to bus {route['second_bus']} to reach {end_stop}.\")\n",
    "    else:\n",
    "        print(f\"No transfer routes found from {start_stop} to {end_stop}.\")\n",
    "\n",
    "# Inputs\n",
    "start_stop = input(\"Enter the starting stop: \").strip().lower()\n",
    "end_stop = input(\"Enter the ending stop: \").strip().lower()\n",
    "\n",
    "find_direct_buses(start_stop, end_stop)\n",
    "if counter == 0:\n",
    "    find_transfer_routes(start_stop, end_stop)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "57b81a41-b516-481f-9268-1bf342c93e35",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Bus 106sd transfer options:\n",
      "  Transfer to Bus 1 at stops: VANITA VISHRAM GROUND\n",
      "  Transfer to Bus 23U at stops: Golden Point\n",
      "  Transfer to Bus 02U at stops: LINEAR BUS STOP, VANITA VISHRAM GROUND\n",
      "  Transfer to Bus 136D at stops: Jaani Farsaan, Golden Point, Gandhi College, Majura Gate, Vanita Vishram, Kargil Chowk BRTS, Piplod BRTS, Sushrut Hospital, S.V.N.I.T. BRTS, Athwagate, Sub Jail\n",
      "\n",
      "Bus 1 transfer options:\n",
      "  Transfer to Bus 106sd at stops: VANITA VISHRAM GROUND\n",
      "  Transfer to Bus 02U at stops: KHARWARNAGAR BRTS, NEW CIVIL HOSPITAL, KINNARY CINEMA, LAL DARWAJA, ADAJAN GSRTC, KAMELA DARWAJA, RAILWAY STATION TERMINAL, TEXTILE MARKET, GOTALAWADI, SAHARA DARWAJA, UDHANA DARWAJA BRTS, SWAMINARAYAN CHOWK BRTS, SUB JAIL, GOLDEN POINT, MAAN DARWAJA, VANITA VISHRAM GROUND, ADAJAN PATIYA BRTS, GANDHI COLLAGE\n",
      "\n",
      "Bus 23U transfer options:\n",
      "  Transfer to Bus 106sd at stops: Golden Point\n",
      "  Transfer to Bus 136D at stops: Golden Point, Linear Bus Stop, Railway Station Terminal\n",
      "\n",
      "Bus 02U transfer options:\n",
      "  Transfer to Bus 106sd at stops: LINEAR BUS STOP, VANITA VISHRAM GROUND\n",
      "  Transfer to Bus 1 at stops: KHARWARNAGAR BRTS, NEW CIVIL HOSPITAL, LAL DARWAJA, GANDHI COLLAGE, ADAJAN GSRTC, KAMELA DARWAJA, VANITA VISHRAM GROUND, RAILWAY STATION TERMINAL, GOTALAWADI, TEXTILE MARKET, SAHARA DARWAJA, UDHANA DARWAJA BRTS, SUB JAIL, SWAMINARAYAN CHOWK BRTS, MAAN DARWAJA, KINNARY CINEMA, ADAJAN PATIYA BRTS, GOLDEN POINT\n",
      "\n",
      "Bus 136D transfer options:\n",
      "  Transfer to Bus 106sd at stops: Jaani Farsaan, Golden Point, Gandhi College, Majura Gate, Vanita Vishram, Kargil Chowk BRTS, Piplod BRTS, Sushrut Hospital, S.V.N.I.T. BRTS, Athwagate, Sub Jail\n",
      "  Transfer to Bus 23U at stops: Golden Point, Linear Bus Stop, Railway Station Terminal\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "# Assuming `data.csv` is the CSV file with the data formatted as above\n",
    "file_path = 'surat_bus.csv'\n",
    "# Load data\n",
    "df = pd.read_csv(file_path)\n",
    "\n",
    "# Create a dictionary to store each bus and its stops\n",
    "bus_stops = {row['bus no']: [stop for stop in row[1:] if pd.notna(stop)] for _, row in df.iterrows()}\n",
    "\n",
    "# Find transfer options\n",
    "transfers = {}\n",
    "\n",
    "for bus1, stops1 in bus_stops.items():\n",
    "    for bus2, stops2 in bus_stops.items():\n",
    "        if bus1 != bus2:\n",
    "            # Find common stops between the two buses\n",
    "            common_stops = set(stops1).intersection(stops2)\n",
    "            if common_stops:\n",
    "                if bus1 not in transfers:\n",
    "                    transfers[bus1] = []\n",
    "                # Add bus2 and the common stops to the transfer options for bus1\n",
    "                transfers[bus1].append((bus2, list(common_stops)))\n",
    "\n",
    "# Display transfer options\n",
    "for bus, options in transfers.items():\n",
    "    print(f\"\\nBus {bus} transfer options:\")\n",
    "    for transfer_bus, stops in options:\n",
    "        print(f\"  Transfer to Bus {transfer_bus} at stops: {', '.join(stops)}\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9427fa90-8a38-4d10-bd18-e91fb5607ad2",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.12.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
